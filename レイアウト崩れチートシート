# HTML/CSS レイアウト崩れ対応チートシート（新人エンジニア向け）

## 目次
1. [テキストのレイアウト崩れ](#テキストのレイアウト崩れ)
2. [ボタンのレイアウト崩れ](#ボタンのレイアウト崩れ)
3. [入力フォームのレイアウト崩れ](#入力フォームのレイアウト崩れ)
4. [レスポンシブ対応のテクニック](#レスポンシブ対応のテクニック)
5. [よくあるエラーと解決策](#よくあるエラーと解決策)

## テキストのレイアウト崩れ

### 問題1: 長い単語が要素からはみ出す

```html
<!-- 固定幅の要素内に長いテキストを配置 -->
<div class="container">
    <p class="text">This is a very long supercalifragilisticexpialidocious word that overflows.</p>
</div>
```

```css
.container {
    width: 200px; /* 固定幅の指定で、長い単語がはみ出す可能性がある */
    border: 1px solid #ccc; /* 視覚的に確認しやすいように枠線を追加 */
}

.text {
    /* デフォルト設定では単語は折り返されず、要素からはみ出す */
}
```

### 解決策1: word-breakプロパティの使用

```css
.text {
    word-break: break-all; /* 単語内でも必要に応じて折り返す（どの位置でも折り返し可能） */
}

/* または */

.text {
    word-wrap: break-word; /* 単語が長すぎる場合にのみ単語内で折り返す（なるべく単語の区切りで折り返し） */
    overflow-wrap: break-word; /* word-wrapの別名で、より新しい標準 */
}
```

### 問題2: 単語途中での切れ目が見栄え悪い

```html
<div class="narrow-column">
    <p>A demonstration of hyphenation for improving readability of wrapped text in narrow columns.</p>
</div>
```

```css
.narrow-column {
    width: 150px; /* 狭い幅の設定 */
    border: 1px solid #ccc; /* 確認用の枠線 */
}
```

### 解決策2: ハイフネーションの使用

```css
.narrow-column {
    width: 150px; /* 狭い幅の設定 */
    hyphens: auto; /* 自動ハイフネーションを有効化（単語の区切りに - を入れる） */
    -webkit-hyphens: auto; /* Safari用のベンダープレフィックス */
    -ms-hyphens: auto; /* IE/Edge用のベンダープレフィックス */
    text-align: justify; /* 両端揃えで見栄えを良くする（任意） */
}
```

### 問題3: テキストが複数行になったときの高さ調整

```html
<div class="card">
    <h2 class="title">短いタイトル</h2>
    <p class="description">短い説明文</p>
</div>

<div class="card">
    <h2 class="title">とても長いタイトルでレイアウトが崩れる可能性があります</h2>
    <p class="description">これは非常に長い説明文で、複数行になった場合にレイアウトの高さが変わってしまいます。</p>
</div>
```

```css
.card {
    width: 250px; /* カードの幅 */
    border: 1px solid #ddd; /* 枠線 */
    padding: 10px; /* 内側の余白 */
    margin-bottom: 10px; /* カード間の余白 */
}

.title {
    /* 高さ指定がないため、内容によって高さが変わる */
}
```

### 解決策3: 最小高さと省略表示の使用

```css
.title {
    min-height: 50px; /* 最小の高さを指定し、内容が少なくても一定の高さを確保 */
    display: -webkit-box; /* 複数行の省略表示に必要 */
    -webkit-line-clamp: 2; /* 最大表示行数 */
    -webkit-box-orient: vertical; /* テキストの方向 */
    overflow: hidden; /* はみ出した部分を非表示 */
    text-overflow: ellipsis; /* はみ出した場合に「...」を表示 */
}

.description {
    min-height: 60px; /* 説明文の最小高さ */
    max-height: 60px; /* 説明文の最大高さ */
    overflow: hidden; /* はみ出し部分を隠す */
}
```

## ボタンのレイアウト崩れ

### 問題1: 固定幅ボタンでテキストがはみ出す

```html
<button class="btn-fixed">ログイン</button>
<button class="btn-fixed">アカウント作成はこちら</button>
```

```css
.btn-fixed {
    width: 100px; /* 固定幅のボタン */
    padding: 8px 0; /* 上下のパディング */
    background-color: #007bff; /* ボタンの背景色 */
    color: white; /* テキスト色 */
    border: none; /* 枠線なし */
    margin: 5px; /* 余白 */
    text-align: center; /* テキスト中央揃え */
}
```

### 解決策1: 最小幅と最大幅の組み合わせ

```css
.btn-flexible {
    min-width: 100px; /* 最小幅を設定（小さいテキストでも一定の大きさを保持） */
    max-width: 200px; /* 最大幅を設定（大きくなりすぎないように） */
    width: auto; /* コンテンツに合わせた幅 */
    padding: 8px 16px; /* 左右のパディングも追加して余裕を持たせる */
    background-color: #007bff; /* ボタンの背景色 */
    color: white; /* テキスト色 */
    border: none; /* 枠線なし */
    margin: 5px; /* 余白 */
    text-align: center; /* テキスト中央揃え */
    white-space: normal; /* 必要に応じてテキストを折り返す */
}
```

### 問題2: 異なる言語で長さが変わるボタンの揃え方

```html
<div class="button-container">
    <button class="btn-uneven">送信</button>
    <button class="btn-uneven">キャンセル</button>
</div>

<!-- 英語版 -->
<div class="button-container">
    <button class="btn-uneven">Submit</button>
    <button class="btn-uneven">Cancel</button>
</div>
```

```css
.button-container {
    display: flex; /* 横並びにする */
    gap: 10px; /* ボタン間の隙間 */
}

.btn-uneven {
    padding: 8px 16px; /* パディング */
    background-color: #007bff; /* 背景色 */
    color: white; /* テキスト色 */
    border: none; /* 枠線なし */
}
```

### 解決策2: フレックスボックスとフレックスグロー

```css
.button-container {
    display: flex; /* フレックスボックスを使用 */
    gap: 10px; /* ボタン間の隙間 */
}

.btn-even {
    flex: 1; /* 利用可能なスペースを均等に分配 */
    padding: 8px 16px; /* パディング */
    background-color: #007bff; /* 背景色 */
    color: white; /* テキスト色 */
    border: none; /* 枠線なし */
    text-align: center; /* テキスト中央揃え */
}
```

## 入力フォームのレイアウト崩れ

### 問題1: ラベルとフォームの位置がずれる

```html
<div class="form-group">
    <label>氏名:</label>
    <input type="text" placeholder="山田太郎">
</div>
<div class="form-group">
    <label>メールアドレス:</label>
    <input type="email" placeholder="example@mail.com">
</div>
```

```css
.form-group {
    margin-bottom: 15px; /* グループ間の余白 */
}

label {
    display: inline-block; /* インライン要素だがwidthを指定可能に */
    width: 100px; /* ラベルの幅 */
}

input {
    padding: 5px; /* 入力欄の内側余白 */
}
```

### 解決策1: フレックスボックスとアライメント

```css
.form-group {
    display: flex; /* フレックスボックスを使用 */
    align-items: center; /* 縦方向中央揃え */
    margin-bottom: 15px; /* グループ間の余白 */
}

label {
    flex: 0 0 150px; /* 幅150pxで縮まず伸びない */
    /* width不要 - flexで指定 */
}

input {
    flex: 1; /* 残りのスペースを使用 */
    padding: 8px; /* 入力欄の内側余白 */
    max-width: 300px; /* 入力欄の最大幅 */
}
```

### 問題2: プレースホルダーが切れる/見えにくい

```html
<input type="text" class="input-problematic" placeholder="長いプレースホルダーテキストが切れる可能性があります">
```

```css
.input-problematic {
    width: 200px; /* 固定幅 */
    padding: 5px; /* パディング */
}
```

### 解決策2: 適切な幅と省略表示

```css
.input-improved {
    width: 200px; /* ベース幅 */
    min-width: 150px; /* 最小幅 */
    padding: 8px; /* 十分なパディング */
    text-overflow: ellipsis; /* 長すぎるテキストは省略記号で表示 */
}
```

### 問題3: 複数行テキストエリアのサイズ問題

```html
<textarea class="textarea-fixed" placeholder="コメントを入力"></textarea>
```

```css
.textarea-fixed {
    width: 300px; /* 固定幅 */
    height: 100px; /* 固定高さ */
}
```

### 解決策3: リサイズ制御とmin/max設定

```css
.textarea-flexible {
    width: 100%; /* 親要素いっぱいに広げる */
    max-width: 500px; /* 最大幅 */
    min-height: 100px; /* 最小高さ */
    resize: vertical; /* 縦方向のみリサイズ可能 */
    padding: 10px; /* 内部余白 */
    box-sizing: border-box; /* パディングを幅に含める */
}
```

## レスポンシブ対応のテクニック

### 問題1: スマホで横スクロールが発生する

```html
<div class="container-wide">
    <div class="content">
        幅の広いコンテンツ
    </div>
</div>
```

```css
.container-wide {
    width: 1000px; /* 固定幅が広すぎる */
}

.content {
    /* 特に指定なし */
}
```

### 解決策1: 最大幅とビューポート設定

```html
<!-- HEAD内にビューポート設定を追加 -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
```

```css
.container-responsive {
    width: 100%; /* 親要素いっぱいに広げる */
    max-width: 1000px; /* PCでの最大幅 */
    margin: 0 auto; /* 中央揃え */
    padding: 0 15px; /* 左右に余白 */
    box-sizing: border-box; /* パディングを幅に含める */
}

.content {
    overflow-wrap: break-word; /* 長い単語の折り返し */
}
```

### 問題2: 複数カラムのレイアウトがスマホで崩れる

```html
<div class="columns">
    <div class="column">1つ目のカラム</div>
    <div class="column">2つ目のカラム</div>
    <div class="column">3つ目のカラム</div>
</div>
```

```css
.columns {
    display: flex; /* 横並び */
}

.column {
    flex: 1; /* 均等に分配 */
    padding: 10px; /* 内部余白 */
    border: 1px solid #ddd; /* 枠線 */
}
```

### 解決策2: メディアクエリを使った切り替え

```css
.columns {
    display: flex; /* 横並び */
    flex-wrap: wrap; /* 必要に応じて折り返し */
}

.column {
    flex: 1; /* 均等に分配 */
    min-width: 250px; /* 最小幅 */
    padding: 15px; /* 内部余白 */
    border: 1px solid #ddd; /* 枠線 */
    box-sizing: border-box; /* パディングを幅に含める */
}

/* スマホ向けスタイル */
@media (max-width: 767px) {
    .columns {
        flex-direction: column; /* 縦並びに変更 */
    }
    
    .column {
        width: 100%; /* 幅いっぱい */
        margin-bottom: 15px; /* 下部余白 */
    }
}
```

### 問題3: 画像がスマホで大きすぎる

```html
<img src="example.jpg" class="image-fixed" alt="サンプル画像">
```

```css
.image-fixed {
    width: 500px; /* 固定幅 */
    height: 300px; /* 固定高さ */
}
```

### 解決策3: 最大幅と高さの自動調整

```css
.image-responsive {
    max-width: 100%; /* 親要素の幅を超えない */
    height: auto; /* 縦横比を保持 */
    display: block; /* ブロック要素として表示 */
}
```

## よくあるエラーと解決策

### 1. ボックスモデルの理解不足によるレイアウト崩れ

```css
/* 問題のある指定 */
.box-problematic {
    width: 300px; /* 幅指定 */
    padding: 20px; /* パディング */
    border: 2px solid #333; /* 枠線 */
    /* 実際の横幅は 300px + 20px×2 + 2px×2 = 344px になる */
}

/* 解決策 */
.box-fixed {
    width: 300px; /* 幅指定 */
    padding: 20px; /* パディング */
    border: 2px solid #333; /* 枠線 */
    box-sizing: border-box; /* パディングと枠線を幅に含める */
    /* 実際の横幅は 300px のまま */
}
```

### 2. フロートによるコンテナ高さの崩れ

```html
<div class="container-float">
    <div class="float-left">左に浮動</div>
    <div class="float-right">右に浮動</div>
</div>
```

```css
.container-float {
    /* clearfixがないためフロート要素の高さが考慮されない */
    border: 1px solid #ccc; /* 枠線 */
}

.float-left {
    float: left; /* 左に浮動 */
    width: 50%; /* 幅 */
}

.float-right {
    float: right; /* 右に浮動 */
    width: 50%; /* 幅 */
}
```

### 解決策: クリアフィックスまたはフレックスボックス

```css
/* クリアフィックス方式 */
.container-float::after {
    content: ""; /* 疑似要素の内容 */
    display: table; /* テーブル表示 */
    clear: both; /* 両方のフロートをクリア */
}

/* または、フレックスボックス方式（推奨） */
.container-flex {
    display: flex; /* フレックスボックス */
    border: 1px solid #ccc; /* 枠線 */
}

.flex-item {
    flex: 1; /* 均等に分配 */
    /* floatは不要 */
}
```

### 3. 垂直方向の中央揃えの失敗

```html
<div class="container-vertical">
    <div class="centered-content">中央に配置したいコンテンツ</div>
</div>
```

```css
.container-vertical {
    height: 200px; /* 高さ */
    border: 1px solid #ccc; /* 枠線 */
    /* 中央揃えの指定がない */
}
```

### 解決策: フレックスボックスまたはグリッドレイアウト

```css
/* フレックスボックス方式 */
.container-flex-center {
    height: 200px; /* 高さ */
    border: 1px solid #ccc; /* 枠線 */
    display: flex; /* フレックスボックス */
    align-items: center; /* 縦方向中央揃え */
    justify-content: center; /* 横方向中央揃え */
}

/* グリッドレイアウト方式 */
.container-grid-center {
    height: 200px; /* 高さ */
    border: 1px solid #ccc; /* 枠線 */
    display: grid; /* グリッドレイアウト */
    place-items: center; /* 縦横両方とも中央揃え（align-itemsとjustify-itemsを同時指定） */
}
```

## まとめ

レイアウト崩れは主に以下の原則で解決できます：

1. **固定値を避け、相対値を使う**
   - `width: 100%`、`max-width`、`min-width`の組み合わせ
   - `vh`、`vw`などのビューポート単位

2. **フレックスボックスとグリッドの活用**
   - 複雑なレイアウトはfloatよりもflexboxかgridを使う
   - `align-items`と`justify-content`で配置を制御

3. **ボックスモデルの理解**
   - `box-sizing: border-box`を基本とする
   - パディングとボーダーを考慮した設計

4. **テキスト関連のプロパティの適切な使用**
   - `word-break`、`overflow-wrap`で長いテキストを制御
   - `text-overflow`で省略表示

5. **メディアクエリによるレスポンシブ対応**
   - デバイスサイズに応じたレイアウト変更
   - モバイルファーストの考え方

この記事を参考に、様々なデバイスで美しく表示されるウェブサイトを作成しましょう！
